"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/MapChart.tsx":
/*!*************************************!*\
  !*** ./src/components/MapChart.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_simple_maps__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-simple-maps */ \"./node_modules/react-simple-maps/dist/index.umd.js\");\n/* harmony import */ var react_simple_maps__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_simple_maps__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-tooltip */ \"./node_modules/react-tooltip/dist/react-tooltip.min.mjs\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-scale */ \"./node_modules/d3-scale/src/index.js\");\n/* harmony import */ var _utils_dataParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/dataParser */ \"./src/utils/dataParser.ts\");\n/* harmony import */ var _config_geoSources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/geoSources */ \"./src/config/geoSources.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n// World geography data - We'll try multiple sources if needed\nconst defaultGeoUrl = _config_geoSources__WEBPACK_IMPORTED_MODULE_5__.geoSources[0];\n// Color scale for the map\nconst colorScale = [\n    \"#eff3ff\",\n    \"#c6dbef\",\n    \"#9ecae1\",\n    \"#6baed6\",\n    \"#4292c6\",\n    \"#2171b5\",\n    \"#084594\"\n];\nconst MapChart = (param)=>{\n    let { data, selectedVariable, filters, onCountrySelect } = param;\n    _s();\n    const [tooltipContent, setTooltipContent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [tooltipId, setTooltipId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"); // Track which element is being hovered\n    const [mapError, setMapError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [geoUrl, setGeoUrl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultGeoUrl);\n    const loggedCountriesRef = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(false);\n    const [geoDataLoaded, setGeoDataLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"MapChart rendered with \".concat(data.length, \" data points\"));\n        console.log(\"Selected variable: \".concat(selectedVariable));\n        console.log(\"Active filters:\", filters);\n        // Debug: Check first 5 data items\n        if (data.length > 0) {\n            console.log(\"First 5 data items:\", data.slice(0, 5));\n            // Debug: Check if any data has the selected variable\n            const matchingVariableData = data.filter((item)=>item.variable === selectedVariable);\n            console.log(\"Items matching variable \".concat(selectedVariable, \":\"), matchingVariableData.length);\n            if (matchingVariableData.length > 0) {\n                console.log(\"First 5 matching items:\", matchingVariableData.slice(0, 5));\n            }\n        }\n    }, [\n        data,\n        selectedVariable,\n        filters\n    ]);\n    // Try to find a working GeoJSON source\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let currentSourceIndex = 0;\n        let mounted = true;\n        const tryGeoSource = async ()=>{\n            if (!mounted) return;\n            try {\n                const url = _config_geoSources__WEBPACK_IMPORTED_MODULE_5__.geoSources[currentSourceIndex];\n                console.log(\"Trying geo source \".concat(currentSourceIndex + 1, \"/\").concat(_config_geoSources__WEBPACK_IMPORTED_MODULE_5__.geoSources.length, \": \").concat(url));\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error(\"Failed to fetch geo data from \".concat(url, \": \").concat(response.status));\n                }\n                const geoData = await response.json();\n                // Verify that the file has the structure we need\n                if (!geoData.objects || !geoData.type) {\n                    throw new Error(\"Invalid GeoJSON format\");\n                }\n                // Check a sample feature\n                if (geoData.features && geoData.features.length > 0) {\n                    const sample = geoData.features[0];\n                    if (!sample.properties || !sample.properties.NAME || !sample.properties.ISO_A3) {\n                        console.warn(\"GeoJSON is missing expected properties, but will try to work with it\");\n                    }\n                    console.log(\"GeoJSON source working:\", url);\n                    console.log(\"Sample properties:\", Object.keys(sample.properties));\n                }\n                if (mounted) {\n                    setGeoUrl(url);\n                    setGeoDataLoaded(true);\n                    console.log(\"Successfully loaded geo data from:\", url);\n                }\n            } catch (error) {\n                console.error(\"Error loading geo data:\", error);\n                // Try the next source\n                currentSourceIndex++;\n                if (currentSourceIndex < _config_geoSources__WEBPACK_IMPORTED_MODULE_5__.geoSources.length) {\n                    if (mounted) {\n                        setTimeout(tryGeoSource, 500); // Try next source after a short delay\n                    }\n                } else {\n                    if (mounted) {\n                        console.error(\"All geo sources failed\");\n                        setMapError(\"Failed to load map data. Please try again later.\");\n                    }\n                }\n            }\n        };\n        // Start trying sources\n        tryGeoSource();\n        return ()=>{\n            mounted = false;\n        };\n    }, []);\n    // Aggregate data by country for the selected variable and filters\n    const countryData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const aggregatedData = (0,_utils_dataParser__WEBPACK_IMPORTED_MODULE_4__.getAggregatedDataByCountry)(data, selectedVariable, {\n            battAlias: filters.battAlias || undefined,\n            continent: filters.continent || undefined,\n            climate: filters.climate || undefined,\n            model_series: filters.model_series || undefined\n        });\n        // Log some info about the country data\n        console.log(\"Country data:\", aggregatedData);\n        console.log(\"Country data countries:\", Object.keys(aggregatedData));\n        console.log(\"Country data has entries:\", Object.keys(aggregatedData).length > 0);\n        return aggregatedData;\n    }, [\n        data,\n        selectedVariable,\n        filters\n    ]);\n    // Check if we have any data after filtering\n    const hasData = Object.keys(countryData).length > 0;\n    // Create a color scale based on the data range\n    const colorScaleFunction = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        try {\n            if (!hasData) {\n                return ()=>\"#F5F5F5\"; // Default color when no data\n            }\n            const { min, max } = (0,_utils_dataParser__WEBPACK_IMPORTED_MODULE_4__.getMinMaxValues)(countryData);\n            console.log(\"Data range: min=\".concat(min, \", max=\").concat(max));\n            // Using scaleQuantile for better distribution across non-uniformly distributed data\n            return (0,d3_scale__WEBPACK_IMPORTED_MODULE_6__.scaleQuantile)().domain([\n                min,\n                max\n            ]).range(colorScale);\n        } catch (error) {\n            console.error(\"Error creating color scale:\", error);\n            setMapError(\"Error creating color scale\");\n            return ()=>\"#F5F5F5\"; // Default color function\n        }\n    }, [\n        countryData,\n        hasData\n    ]);\n    const handleMouseEnter = (geo)=>{\n        try {\n            // Debug the entire geo object to see what properties are actually available\n            if (!loggedCountriesRef.current) {\n                console.log(\"Geo object:\", geo);\n                console.log(\"Geo properties:\", geo.properties);\n                // Let's check all property names to find ISO code field\n                const propNames = Object.keys(geo.properties);\n                console.log(\"All property names:\", propNames);\n                // Try to identify which property might contain the ISO code\n                for (const prop of propNames){\n                    const value = geo.properties[prop];\n                    if (typeof value === \"string\" && value.length === 3) {\n                        console.log(\"Potential ISO code property: \".concat(prop, \" = \").concat(value));\n                    }\n                }\n                loggedCountriesRef.current = true;\n            }\n            // The property names might be different from what we expect\n            // Try to access name and ISO code regardless of case\n            let name = geo.properties.NAME || geo.properties.name;\n            let isoCode = geo.properties.ISO_A3 || geo.properties.iso_a3;\n            // If we still don't have an ISO code, try some common property names\n            if (!isoCode) {\n                const potentialIsoProps = [\n                    \"iso\",\n                    \"id\",\n                    \"code\",\n                    \"ISO_A2\",\n                    \"iso_a2\"\n                ];\n                for (const prop of potentialIsoProps){\n                    if (geo.properties[prop] && typeof geo.properties[prop] === \"string\") {\n                        isoCode = geo.properties[prop];\n                        console.log(\"Found ISO code in alternate property: \".concat(prop));\n                        break;\n                    }\n                }\n            }\n            // Use the country name as fallback for identifying countries\n            if (!isoCode && name) {\n                // Map some common country names to ISO codes\n                const nameToIso = {\n                    \"United States\": \"USA\",\n                    \"United States of America\": \"USA\",\n                    \"United Kingdom\": \"GBR\",\n                    \"UK\": \"GBR\",\n                    \"Germany\": \"DEU\",\n                    \"France\": \"FRA\",\n                    \"China\": \"CHN\",\n                    \"Japan\": \"JPN\",\n                    \"South Korea\": \"KOR\",\n                    \"Korea, Republic of\": \"KOR\",\n                    \"Russia\": \"RUS\",\n                    \"Russian Federation\": \"RUS\"\n                };\n                isoCode = nameToIso[name] || \"\";\n                if (isoCode) {\n                    console.log('Mapped country name \"'.concat(name, '\" to ISO code \"').concat(isoCode, '\"'));\n                }\n            }\n            // Create a standardized country code for lookup\n            const countryCode = isoCode ? isoCode.toUpperCase() : \"\";\n            console.log(\"Hovering over: \".concat(name || \"Unknown\", \" (\").concat(countryCode || \"No ISO code\", \")\"));\n            // Check if we have data for this country\n            const hasCountryData = countryCode && countryCode in countryData;\n            console.log(\"Data for \".concat(countryCode, \" exists: \").concat(hasCountryData));\n            // Get the value, or 0 if no data\n            const value = hasCountryData ? countryData[countryCode] : 0;\n            // Format the tooltip based on whether we have data\n            if (hasCountryData) {\n                setTooltipContent(\"\".concat(name || \"Unknown\", \": \").concat(value.toLocaleString()));\n            } else {\n                setTooltipContent(\"\".concat(name || \"Unknown\", \": No data available\"));\n            }\n            setTooltipId(geo.rsmKey);\n        } catch (error) {\n            console.error(\"Error on mouse enter:\", error);\n        }\n    };\n    const handleMouseLeave = ()=>{\n        setTooltipContent(\"\");\n        setTooltipId(\"\");\n    };\n    const handleCountryClick = (geo)=>{\n        try {\n            // Get the ISO code, trying different property names for compatibility\n            let isoCode = geo.properties.ISO_A3 || geo.properties.iso_a3;\n            const countryName = geo.properties.NAME || geo.properties.name || \"Unknown\";\n            // If we still don't have an ISO code, try some common property names\n            if (!isoCode) {\n                const potentialIsoProps = [\n                    \"iso\",\n                    \"id\",\n                    \"code\",\n                    \"ISO_A2\",\n                    \"iso_a2\"\n                ];\n                for (const prop of potentialIsoProps){\n                    if (geo.properties[prop] && typeof geo.properties[prop] === \"string\") {\n                        isoCode = geo.properties[prop];\n                        break;\n                    }\n                }\n            }\n            // Use the country name as fallback for identifying countries\n            if (!isoCode && countryName) {\n                // Map some common country names to ISO codes\n                const nameToIso = {\n                    \"United States\": \"USA\",\n                    \"United States of America\": \"USA\",\n                    \"United Kingdom\": \"GBR\",\n                    \"UK\": \"GBR\",\n                    \"Germany\": \"DEU\",\n                    \"France\": \"FRA\",\n                    \"China\": \"CHN\",\n                    \"Japan\": \"JPN\",\n                    \"South Korea\": \"KOR\",\n                    \"Korea, Republic of\": \"KOR\",\n                    \"Russia\": \"RUS\",\n                    \"Russian Federation\": \"RUS\"\n                };\n                isoCode = nameToIso[countryName] || \"\";\n            }\n            const countryCode = isoCode ? isoCode.toUpperCase() : \"\";\n            // Only call onCountrySelect if we have data for this country\n            if (countryCode && countryCode in countryData) {\n                onCountrySelect(countryCode);\n            }\n        } catch (error) {\n            console.error(\"Error on country click:\", error);\n        }\n    };\n    if (mapError) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"text-red-500 text-center p-4\",\n            children: mapError\n        }, void 0, false, {\n            fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n            lineNumber: 337,\n            columnNumber: 12\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_tooltip__WEBPACK_IMPORTED_MODULE_3__.Tooltip, {\n                id: \"map-tooltip\",\n                place: \"top\",\n                render: ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: tooltipContent\n                    }, void 0, false, {\n                        fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                        lineNumber: 345,\n                        columnNumber: 23\n                    }, void 0)\n            }, void 0, false, {\n                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                lineNumber: 342,\n                columnNumber: 7\n            }, undefined),\n            geoDataLoaded ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_simple_maps__WEBPACK_IMPORTED_MODULE_2__.ComposableMap, {\n                projection: \"geoMercator\",\n                projectionConfig: {\n                    scale: 150,\n                    center: [\n                        0,\n                        30\n                    ]\n                },\n                height: 500,\n                width: 900,\n                style: {\n                    width: \"100%\",\n                    height: \"auto\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_simple_maps__WEBPACK_IMPORTED_MODULE_2__.ZoomableGroup, {\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_simple_maps__WEBPACK_IMPORTED_MODULE_2__.Geographies, {\n                        geography: geoUrl,\n                        children: (param)=>{\n                            let { geographies } = param;\n                            return geographies.map((geo)=>{\n                                try {\n                                    // Get the ISO code, trying different property names for compatibility\n                                    let isoCode = geo.properties.ISO_A3 || geo.properties.iso_a3;\n                                    let countryName = geo.properties.NAME || geo.properties.name || \"Unknown\";\n                                    // If we still don't have an ISO code, try some common property names\n                                    if (!isoCode) {\n                                        const potentialIsoProps = [\n                                            \"iso\",\n                                            \"id\",\n                                            \"code\",\n                                            \"ISO_A2\",\n                                            \"iso_a2\"\n                                        ];\n                                        for (const prop of potentialIsoProps){\n                                            if (geo.properties[prop] && typeof geo.properties[prop] === \"string\") {\n                                                isoCode = geo.properties[prop];\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    // Use the country name as fallback for identifying countries\n                                    if (!isoCode && countryName) {\n                                        // Map some common country names to ISO codes\n                                        const nameToIso = {\n                                            \"United States\": \"USA\",\n                                            \"United States of America\": \"USA\",\n                                            \"United Kingdom\": \"GBR\",\n                                            \"UK\": \"GBR\",\n                                            \"Germany\": \"DEU\",\n                                            \"France\": \"FRA\",\n                                            \"China\": \"CHN\",\n                                            \"Japan\": \"JPN\",\n                                            \"South Korea\": \"KOR\",\n                                            \"Korea, Republic of\": \"KOR\",\n                                            \"Russia\": \"RUS\",\n                                            \"Russian Federation\": \"RUS\"\n                                        };\n                                        isoCode = nameToIso[countryName] || \"\";\n                                    }\n                                    const countryCode = isoCode ? isoCode.toUpperCase() : \"\";\n                                    // Debug the first few countries to see if we're getting the right data\n                                    if (countryCode && !loggedCountriesRef.current) {\n                                        console.log(\"Sample country from map: \".concat(countryName, \" (\").concat(countryCode, \")\"));\n                                        loggedCountriesRef.current = true;\n                                    }\n                                    // Check if we have data for this country\n                                    const hasData = countryCode && countryCode in countryData;\n                                    const value = hasData ? countryData[countryCode] : 0;\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_simple_maps__WEBPACK_IMPORTED_MODULE_2__.Geography, {\n                                        geography: geo,\n                                        fill: value ? colorScaleFunction(value) : \"#F5F5F5\",\n                                        stroke: \"#D6D6DA\",\n                                        strokeWidth: 0.5,\n                                        style: {\n                                            default: {\n                                                outline: \"none\"\n                                            },\n                                            hover: {\n                                                outline: \"none\",\n                                                fill: \"#F53\"\n                                            },\n                                            pressed: {\n                                                outline: \"none\"\n                                            }\n                                        },\n                                        \"data-tooltip-id\": \"map-tooltip\",\n                                        onMouseEnter: ()=>handleMouseEnter(geo),\n                                        onMouseLeave: handleMouseLeave,\n                                        onClick: ()=>handleCountryClick(geo),\n                                        className: value ? \"cursor-pointer\" : \"cursor-default\"\n                                    }, geo.rsmKey, false, {\n                                        fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                                        lineNumber: 413,\n                                        columnNumber: 23\n                                    }, undefined);\n                                } catch (error) {\n                                    console.error(\"Error rendering geography:\", error);\n                                    return null;\n                                }\n                            });\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                        lineNumber: 359,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                    lineNumber: 358,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                lineNumber: 348,\n                columnNumber: 9\n            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center justify-center h-96\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-center\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-2\"\n                        }, void 0, false, {\n                            fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                            lineNumber: 443,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            children: \"Loading map data...\"\n                        }, void 0, false, {\n                            fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                            lineNumber: 444,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                    lineNumber: 442,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                lineNumber: 441,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-4 mb-2 text-center text-sm\",\n                children: hasData ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-gray-700\",\n                    children: [\n                        \"Showing data for \",\n                        filters.variable,\n                        filters.battAlias ? \", Battery: \".concat(filters.battAlias) : \"\",\n                        filters.continent ? \", Continent: \".concat(filters.continent) : \"\",\n                        filters.climate ? \", Climate: \".concat(filters.climate) : \"\",\n                        filters.model_series ? \", Model: \".concat(filters.model_series) : \"\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                    lineNumber: 452,\n                    columnNumber: 11\n                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-amber-600\",\n                    children: \"No data matches the current filter criteria. Try adjusting your filters.\"\n                }, void 0, false, {\n                    fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                    lineNumber: 460,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                lineNumber: 450,\n                columnNumber: 7\n            }, undefined),\n            hasData && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-center mt-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"mr-2 text-sm\",\n                            children: \"Low\"\n                        }, void 0, false, {\n                            fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                            lineNumber: 468,\n                            columnNumber: 13\n                        }, undefined),\n                        colorScale.map((color, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    backgroundColor: color,\n                                    width: \"20px\",\n                                    height: \"20px\"\n                                }\n                            }, i, false, {\n                                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                                lineNumber: 470,\n                                columnNumber: 15\n                            }, undefined)),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"ml-2 text-sm\",\n                            children: \"High\"\n                        }, void 0, false, {\n                            fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                            lineNumber: 479,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                    lineNumber: 467,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n                lineNumber: 466,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/stef/Documents/Programmieren/world-kpi-dashboard/src/components/MapChart.tsx\",\n        lineNumber: 341,\n        columnNumber: 5\n    }, undefined);\n};\n_s(MapChart, \"R2k4oZOHswhNnbo2lTpvPlaqar8=\");\n_c = MapChart;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapChart);\nvar _c;\n$RefreshReg$(_c, \"MapChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/MapChart.tsx\n"));

/***/ })

});