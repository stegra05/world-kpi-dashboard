"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/dataParser.ts":
/*!*********************************!*\
  !*** ./src/utils/dataParser.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAggregatedDataByCountry: function() { return /* binding */ getAggregatedDataByCountry; },\n/* harmony export */   getCountryData: function() { return /* binding */ getCountryData; },\n/* harmony export */   getFilteredData: function() { return /* binding */ getFilteredData; },\n/* harmony export */   getMinMaxValues: function() { return /* binding */ getMinMaxValues; },\n/* harmony export */   getUniqueBatteryAliases: function() { return /* binding */ getUniqueBatteryAliases; },\n/* harmony export */   getUniqueClimateTypes: function() { return /* binding */ getUniqueClimateTypes; },\n/* harmony export */   getUniqueContinents: function() { return /* binding */ getUniqueContinents; },\n/* harmony export */   getUniqueModelSeries: function() { return /* binding */ getUniqueModelSeries; },\n/* harmony export */   getUniqueVariables: function() { return /* binding */ getUniqueVariables; },\n/* harmony export */   parseData: function() { return /* binding */ parseData; }\n/* harmony export */ });\nfunction parseData(csvText) {\n    const lines = csvText.split(\"\\n\");\n    // Debug the header line\n    console.log(\"Header line:\", lines[0]);\n    const header = lines[0].split(\";\");\n    console.log(\"Header fields:\", header);\n    const data = [];\n    // Skip header line and parse each data line\n    for(let i = 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue; // Skip empty lines\n        const values = line.split(\";\");\n        if (values.length !== header.length) {\n            console.warn(\"Skipping malformed line \".concat(i, \": Expected \").concat(header.length, \" fields, got \").concat(values.length));\n            continue; // Skip malformed lines\n        }\n        // Debug log first few parsings\n        if (i < 5) {\n            console.log(\"Parsing line \".concat(i, \":\"), values);\n        }\n        try {\n            // Ensure iso_a3 is uppercase for consistent lookup\n            const iso_a3 = values[4] ? values[4].toUpperCase() : \"\";\n            data.push({\n                battAlias: values[0],\n                country: values[1],\n                continent: values[2],\n                climate: values[3],\n                iso_a3: iso_a3,\n                model_series: values[5],\n                variable: values[6],\n                value: parseInt(values[7], 10) || 0,\n                description: values[8],\n                count: parseInt(values[9], 10) || 0 // Default to 0 if parsing fails\n            });\n        } catch (err) {\n            console.error(\"Error parsing line \".concat(i, \":\"), err);\n        }\n    }\n    // Debug summary\n    console.log(\"Parsed data summary:\");\n    console.log(\"Total data points: \".concat(data.length));\n    console.log(\"Countries: \".concat(new Set(data.map((item)=>item.country)).size));\n    console.log(\"ISO codes: \".concat(new Set(data.map((item)=>item.iso_a3)).size));\n    console.log(\"Variables: \".concat(new Set(data.map((item)=>item.variable)).size));\n    return data;\n}\nfunction getCountryData(data, countryCode) {\n    return data.filter((item)=>item.iso_a3 === countryCode);\n}\nfunction getUniqueVariables(data) {\n    return [\n        ...new Set(data.map((item)=>item.variable))\n    ];\n}\nfunction getUniqueBatteryAliases(data) {\n    return [\n        ...new Set(data.map((item)=>item.battAlias))\n    ];\n}\nfunction getUniqueContinents(data) {\n    return [\n        ...new Set(data.map((item)=>item.continent).filter((continent)=>continent))\n    ];\n}\nfunction getUniqueClimateTypes(data) {\n    return [\n        ...new Set(data.map((item)=>item.climate).filter((climate)=>climate))\n    ];\n}\nfunction getUniqueModelSeries(data) {\n    return [\n        ...new Set(data.map((item)=>item.model_series).filter((series)=>series))\n    ];\n}\nfunction getFilteredData(data, filters) {\n    return data.filter((item)=>{\n        // Always filter by variable\n        if (item.variable !== filters.variable) return false;\n        // Apply optional filters\n        if (filters.battAlias && item.battAlias !== filters.battAlias) return false;\n        if (filters.continent && item.continent !== filters.continent) return false;\n        if (filters.climate && item.climate !== filters.climate) return false;\n        if (filters.model_series && item.model_series !== filters.model_series) return false;\n        return true;\n    });\n}\nfunction getAggregatedDataByCountry(data, variable, filters) {\n    const result = {};\n    // Filter data for the selected variable and other filters\n    let filteredData = data.filter((item)=>item.variable === variable);\n    // Apply optional filters\n    if (filters) {\n        if (filters.battAlias) {\n            filteredData = filteredData.filter((item)=>item.battAlias === filters.battAlias);\n        }\n        if (filters.continent) {\n            filteredData = filteredData.filter((item)=>item.continent === filters.continent);\n        }\n        if (filters.climate) {\n            filteredData = filteredData.filter((item)=>item.climate === filters.climate);\n        }\n        if (filters.model_series) {\n            filteredData = filteredData.filter((item)=>item.model_series === filters.model_series);\n        }\n    }\n    // Debug the filtered data\n    console.log(\"After filtering for \".concat(variable, \", \").concat(filteredData.length, \" data points remain\"));\n    if (filteredData.length > 0) {\n        console.log(\"Sample filtered data:\", filteredData.slice(0, 3));\n    }\n    // Aggregate by country\n    filteredData.forEach((item)=>{\n        // Make sure iso_a3 is uppercase for consistent lookup\n        const countryCode = item.iso_a3 ? item.iso_a3.toUpperCase() : \"\";\n        if (countryCode) {\n            if (result[countryCode]) {\n                result[countryCode] += item.value;\n            } else {\n                result[countryCode] = item.value;\n            }\n        }\n    });\n    // Debug the result\n    console.log(\"Aggregated data for \".concat(Object.keys(result).length, \" countries\"));\n    return result;\n}\nfunction getMinMaxValues(data) {\n    const values = Object.values(data);\n    return {\n        min: Math.min(...values),\n        max: Math.max(...values)\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/dataParser.ts\n"));

/***/ })

});