"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-simple-maps";
exports.ids = ["vendor-chunks/react-simple-maps"];
exports.modules = {

/***/ "./node_modules/react-simple-maps/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/react-simple-maps/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"react\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"prop-types\");\nvar d3Geo = __webpack_require__(/*! d3-geo */ \"d3-geo\");\nvar topojsonClient = __webpack_require__(/*! topojson-client */ \"topojson-client\");\nvar d3Zoom = __webpack_require__(/*! d3-zoom */ \"d3-zoom\");\nvar d3Selection = __webpack_require__(/*! d3-selection */ \"d3-selection\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\nvar PropTypes__default = /*#__PURE__*/ _interopDefaultLegacy(PropTypes);\nvar d3Geo__namespace = /*#__PURE__*/ _interopNamespace(d3Geo);\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar _excluded$a = [\n    \"width\",\n    \"height\",\n    \"projection\",\n    \"projectionConfig\"\n];\nvar geoPath = d3Geo__namespace.geoPath, projections = _objectWithoutProperties(d3Geo__namespace, [\n    \"geoPath\"\n]);\nvar MapContext = React.createContext();\nvar makeProjection = function makeProjection(_ref) {\n    var _ref$projectionConfig = _ref.projectionConfig, projectionConfig = _ref$projectionConfig === void 0 ? {} : _ref$projectionConfig, _ref$projection = _ref.projection, projection = _ref$projection === void 0 ? \"geoEqualEarth\" : _ref$projection, _ref$width = _ref.width, width = _ref$width === void 0 ? 800 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? 600 : _ref$height;\n    var isFunc = typeof projection === \"function\";\n    if (isFunc) return projection;\n    var proj = projections[projection]().translate([\n        width / 2,\n        height / 2\n    ]);\n    var supported = [\n        proj.center ? \"center\" : null,\n        proj.rotate ? \"rotate\" : null,\n        proj.scale ? \"scale\" : null,\n        proj.parallels ? \"parallels\" : null\n    ];\n    supported.forEach(function(d) {\n        if (!d) return;\n        proj = proj[d](projectionConfig[d] || proj[d]());\n    });\n    return proj;\n};\nvar MapProvider = function MapProvider(_ref2) {\n    var width = _ref2.width, height = _ref2.height, projection = _ref2.projection, projectionConfig = _ref2.projectionConfig, restProps = _objectWithoutProperties(_ref2, _excluded$a);\n    var _ref3 = projectionConfig.center || [], _ref4 = _slicedToArray(_ref3, 2), cx = _ref4[0], cy = _ref4[1];\n    var _ref5 = projectionConfig.rotate || [], _ref6 = _slicedToArray(_ref5, 3), rx = _ref6[0], ry = _ref6[1], rz = _ref6[2];\n    var _ref7 = projectionConfig.parallels || [], _ref8 = _slicedToArray(_ref7, 2), p1 = _ref8[0], p2 = _ref8[1];\n    var s = projectionConfig.scale || null;\n    var projMemo = React.useMemo(function() {\n        return makeProjection({\n            projectionConfig: {\n                center: cx || cx === 0 || cy || cy === 0 ? [\n                    cx,\n                    cy\n                ] : null,\n                rotate: rx || rx === 0 || ry || ry === 0 ? [\n                    rx,\n                    ry,\n                    rz\n                ] : null,\n                parallels: p1 || p1 === 0 || p2 || p2 === 0 ? [\n                    p1,\n                    p2\n                ] : null,\n                scale: s\n            },\n            projection: projection,\n            width: width,\n            height: height\n        });\n    }, [\n        width,\n        height,\n        projection,\n        cx,\n        cy,\n        rx,\n        ry,\n        rz,\n        p1,\n        p2,\n        s\n    ]);\n    var proj = React.useCallback(projMemo, [\n        projMemo\n    ]);\n    var value = React.useMemo(function() {\n        return {\n            width: width,\n            height: height,\n            projection: proj,\n            path: geoPath().projection(proj)\n        };\n    }, [\n        width,\n        height,\n        proj\n    ]);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(MapContext.Provider, _extends({\n        value: value\n    }, restProps));\n};\nMapProvider.propTypes = {\n    width: PropTypes__default[\"default\"].number,\n    height: PropTypes__default[\"default\"].number,\n    projection: PropTypes__default[\"default\"].oneOfType([\n        PropTypes__default[\"default\"].string,\n        PropTypes__default[\"default\"].func\n    ]),\n    projectionConfig: PropTypes__default[\"default\"].object\n};\nvar useMapContext = function useMapContext() {\n    return React.useContext(MapContext);\n};\nvar _excluded$9 = [\n    \"width\",\n    \"height\",\n    \"projection\",\n    \"projectionConfig\",\n    \"className\"\n];\nvar ComposableMap = React.forwardRef(function(_ref, ref) {\n    var _ref$width = _ref.width, width = _ref$width === void 0 ? 800 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? 600 : _ref$height, _ref$projection = _ref.projection, projection = _ref$projection === void 0 ? \"geoEqualEarth\" : _ref$projection, _ref$projectionConfig = _ref.projectionConfig, projectionConfig = _ref$projectionConfig === void 0 ? {} : _ref$projectionConfig, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$9);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(MapProvider, {\n        width: width,\n        height: height,\n        projection: projection,\n        projectionConfig: projectionConfig\n    }, /*#__PURE__*/ React__default[\"default\"].createElement(\"svg\", _extends({\n        ref: ref,\n        viewBox: \"0 0 \".concat(width, \" \").concat(height),\n        className: \"rsm-svg \".concat(className)\n    }, restProps)));\n});\nComposableMap.displayName = \"ComposableMap\";\nComposableMap.propTypes = {\n    width: PropTypes__default[\"default\"].number,\n    height: PropTypes__default[\"default\"].number,\n    projection: PropTypes__default[\"default\"].oneOfType([\n        PropTypes__default[\"default\"].string,\n        PropTypes__default[\"default\"].func\n    ]),\n    projectionConfig: PropTypes__default[\"default\"].object,\n    className: PropTypes__default[\"default\"].string\n};\nfunction getCoords(w, h, t) {\n    var xOffset = (w * t.k - w) / 2;\n    var yOffset = (h * t.k - h) / 2;\n    return [\n        w / 2 - (xOffset + t.x) / t.k,\n        h / 2 - (yOffset + t.y) / t.k\n    ];\n}\nfunction fetchGeographies(url) {\n    return fetch(url).then(function(res) {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n        return res.json();\n    })[\"catch\"](function(error) {\n        console.log(\"There was a problem when fetching the data: \", error);\n    });\n}\nfunction getFeatures(geographies, parseGeographies) {\n    var isTopojson = geographies.type === \"Topology\";\n    if (!isTopojson) {\n        return parseGeographies ? parseGeographies(geographies.features || geographies) : geographies.features || geographies;\n    }\n    var feats = topojsonClient.feature(geographies, geographies.objects[Object.keys(geographies.objects)[0]]).features;\n    return parseGeographies ? parseGeographies(feats) : feats;\n}\nfunction getMesh(geographies) {\n    var isTopojson = geographies.type === \"Topology\";\n    if (!isTopojson) return null;\n    var outline = topojsonClient.mesh(geographies, geographies.objects[Object.keys(geographies.objects)[0]], function(a, b) {\n        return a === b;\n    });\n    var borders = topojsonClient.mesh(geographies, geographies.objects[Object.keys(geographies.objects)[0]], function(a, b) {\n        return a !== b;\n    });\n    return {\n        outline: outline,\n        borders: borders\n    };\n}\nfunction prepareMesh(outline, borders, path) {\n    return outline && borders ? {\n        outline: _objectSpread2(_objectSpread2({}, outline), {}, {\n            rsmKey: \"outline\",\n            svgPath: path(outline)\n        }),\n        borders: _objectSpread2(_objectSpread2({}, borders), {}, {\n            rsmKey: \"borders\",\n            svgPath: path(borders)\n        })\n    } : {};\n}\nfunction prepareFeatures(geographies, path) {\n    return geographies ? geographies.map(function(d, i) {\n        return _objectSpread2(_objectSpread2({}, d), {}, {\n            rsmKey: \"geo-\".concat(i),\n            svgPath: path(d)\n        });\n    }) : [];\n}\nfunction createConnectorPath() {\n    var dx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n    var dy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n    var curve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n    var curvature = Array.isArray(curve) ? curve : [\n        curve,\n        curve\n    ];\n    var curveX = dx / 2 * curvature[0];\n    var curveY = dy / 2 * curvature[1];\n    return \"M\".concat(0, \",\", 0, \" Q\", -dx / 2 - curveX, \",\").concat(-dy / 2 + curveY, \" \").concat(-dx, \",\").concat(-dy);\n}\nfunction isString(geo) {\n    return typeof geo === \"string\";\n}\nfunction useGeographies(_ref) {\n    var geography = _ref.geography, parseGeographies = _ref.parseGeographies;\n    var _useContext = React.useContext(MapContext), path = _useContext.path;\n    var _useState = React.useState({}), _useState2 = _slicedToArray(_useState, 2), output = _useState2[0], setOutput = _useState2[1];\n    React.useEffect(function() {\n        if (true) return;\n        if (!geography) return;\n        if (isString(geography)) {\n            fetchGeographies(geography).then(function(geos) {\n                if (geos) {\n                    setOutput({\n                        geographies: getFeatures(geos, parseGeographies),\n                        mesh: getMesh(geos)\n                    });\n                }\n            });\n        } else {\n            setOutput({\n                geographies: getFeatures(geography, parseGeographies),\n                mesh: getMesh(geography)\n            });\n        }\n    }, [\n        geography,\n        parseGeographies\n    ]);\n    var _useMemo = React.useMemo(function() {\n        var mesh = output.mesh || {};\n        var preparedMesh = prepareMesh(mesh.outline, mesh.borders, path);\n        return {\n            geographies: prepareFeatures(output.geographies, path),\n            outline: preparedMesh.outline,\n            borders: preparedMesh.borders\n        };\n    }, [\n        output,\n        path\n    ]), geographies = _useMemo.geographies, outline = _useMemo.outline, borders = _useMemo.borders;\n    return {\n        geographies: geographies,\n        outline: outline,\n        borders: borders\n    };\n}\nvar _excluded$8 = [\n    \"geography\",\n    \"children\",\n    \"parseGeographies\",\n    \"className\"\n];\nvar Geographies = React.forwardRef(function(_ref, ref) {\n    var geography = _ref.geography, children = _ref.children, parseGeographies = _ref.parseGeographies, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$8);\n    var _useContext = React.useContext(MapContext), path = _useContext.path, projection = _useContext.projection;\n    var _useGeographies = useGeographies({\n        geography: geography,\n        parseGeographies: parseGeographies\n    }), geographies = _useGeographies.geographies, outline = _useGeographies.outline, borders = _useGeographies.borders;\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"g\", _extends({\n        ref: ref,\n        className: \"rsm-geographies \".concat(className)\n    }, restProps), geographies && geographies.length > 0 && children({\n        geographies: geographies,\n        outline: outline,\n        borders: borders,\n        path: path,\n        projection: projection\n    }));\n});\nGeographies.displayName = \"Geographies\";\nGeographies.propTypes = {\n    geography: PropTypes__default[\"default\"].oneOfType([\n        PropTypes__default[\"default\"].string,\n        PropTypes__default[\"default\"].object,\n        PropTypes__default[\"default\"].array\n    ]),\n    children: PropTypes__default[\"default\"].func,\n    parseGeographies: PropTypes__default[\"default\"].func,\n    className: PropTypes__default[\"default\"].string\n};\nvar _excluded$7 = [\n    \"geography\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseDown\",\n    \"onMouseUp\",\n    \"onFocus\",\n    \"onBlur\",\n    \"style\",\n    \"className\"\n];\nvar Geography = React.forwardRef(function(_ref, ref) {\n    var geography = _ref.geography, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, onMouseDown = _ref.onMouseDown, onMouseUp = _ref.onMouseUp, onFocus = _ref.onFocus, onBlur = _ref.onBlur, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$7);\n    var _useState = React.useState(false), _useState2 = _slicedToArray(_useState, 2), isPressed = _useState2[0], setPressed = _useState2[1];\n    var _useState3 = React.useState(false), _useState4 = _slicedToArray(_useState3, 2), isFocused = _useState4[0], setFocus = _useState4[1];\n    function handleMouseEnter(evt) {\n        setFocus(true);\n        if (onMouseEnter) onMouseEnter(evt);\n    }\n    function handleMouseLeave(evt) {\n        setFocus(false);\n        if (isPressed) setPressed(false);\n        if (onMouseLeave) onMouseLeave(evt);\n    }\n    function handleFocus(evt) {\n        setFocus(true);\n        if (onFocus) onFocus(evt);\n    }\n    function handleBlur(evt) {\n        setFocus(false);\n        if (isPressed) setPressed(false);\n        if (onBlur) onBlur(evt);\n    }\n    function handleMouseDown(evt) {\n        setPressed(true);\n        if (onMouseDown) onMouseDown(evt);\n    }\n    function handleMouseUp(evt) {\n        setPressed(false);\n        if (onMouseUp) onMouseUp(evt);\n    }\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", _extends({\n        ref: ref,\n        tabIndex: \"0\",\n        className: \"rsm-geography \".concat(className),\n        d: geography.svgPath,\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onMouseDown: handleMouseDown,\n        onMouseUp: handleMouseUp,\n        style: style[isPressed || isFocused ? isPressed ? \"pressed\" : \"hover\" : \"default\"]\n    }, restProps));\n});\nGeography.displayName = \"Geography\";\nGeography.propTypes = {\n    geography: PropTypes__default[\"default\"].object,\n    onMouseEnter: PropTypes__default[\"default\"].func,\n    onMouseLeave: PropTypes__default[\"default\"].func,\n    onMouseDown: PropTypes__default[\"default\"].func,\n    onMouseUp: PropTypes__default[\"default\"].func,\n    onFocus: PropTypes__default[\"default\"].func,\n    onBlur: PropTypes__default[\"default\"].func,\n    style: PropTypes__default[\"default\"].object,\n    className: PropTypes__default[\"default\"].string\n};\nvar Geography$1 = React.memo(Geography);\nvar _excluded$6 = [\n    \"fill\",\n    \"stroke\",\n    \"step\",\n    \"className\"\n];\nvar Graticule = React.forwardRef(function(_ref, ref) {\n    var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? \"transparent\" : _ref$fill, _ref$stroke = _ref.stroke, stroke = _ref$stroke === void 0 ? \"currentcolor\" : _ref$stroke, _ref$step = _ref.step, step = _ref$step === void 0 ? [\n        10,\n        10\n    ] : _ref$step, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$6);\n    var _useContext = React.useContext(MapContext), path = _useContext.path;\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", _extends({\n        ref: ref,\n        d: path(d3Geo.geoGraticule().step(step)()),\n        fill: fill,\n        stroke: stroke,\n        className: \"rsm-graticule \".concat(className)\n    }, restProps));\n});\nGraticule.displayName = \"Graticule\";\nGraticule.propTypes = {\n    fill: PropTypes__default[\"default\"].string,\n    stroke: PropTypes__default[\"default\"].string,\n    step: PropTypes__default[\"default\"].array,\n    className: PropTypes__default[\"default\"].string\n};\nvar Graticule$1 = React.memo(Graticule);\nvar _excluded$5 = [\n    \"value\"\n];\nvar ZoomPanContext = React.createContext();\nvar defaultValue = {\n    x: 0,\n    y: 0,\n    k: 1,\n    transformString: \"translate(0 0) scale(1)\"\n};\nvar ZoomPanProvider = function ZoomPanProvider(_ref) {\n    var _ref$value = _ref.value, value = _ref$value === void 0 ? defaultValue : _ref$value, restProps = _objectWithoutProperties(_ref, _excluded$5);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(ZoomPanContext.Provider, _extends({\n        value: value\n    }, restProps));\n};\nZoomPanProvider.propTypes = {\n    x: PropTypes__default[\"default\"].number,\n    y: PropTypes__default[\"default\"].number,\n    k: PropTypes__default[\"default\"].number,\n    transformString: PropTypes__default[\"default\"].string\n};\nvar useZoomPanContext = function useZoomPanContext() {\n    return React.useContext(ZoomPanContext);\n};\nfunction useZoomPan(_ref) {\n    var center = _ref.center, filterZoomEvent = _ref.filterZoomEvent, onMoveStart = _ref.onMoveStart, onMoveEnd = _ref.onMoveEnd, onMove = _ref.onMove, _ref$translateExtent = _ref.translateExtent, translateExtent = _ref$translateExtent === void 0 ? [\n        [\n            -Infinity,\n            -Infinity\n        ],\n        [\n            Infinity,\n            Infinity\n        ]\n    ] : _ref$translateExtent, _ref$scaleExtent = _ref.scaleExtent, scaleExtent = _ref$scaleExtent === void 0 ? [\n        1,\n        8\n    ] : _ref$scaleExtent, _ref$zoom = _ref.zoom, zoom = _ref$zoom === void 0 ? 1 : _ref$zoom;\n    var _useContext = React.useContext(MapContext), width = _useContext.width, height = _useContext.height, projection = _useContext.projection;\n    var _center = _slicedToArray(center, 2), lon = _center[0], lat = _center[1];\n    var _useState = React.useState({\n        x: 0,\n        y: 0,\n        k: 1\n    }), _useState2 = _slicedToArray(_useState, 2), position = _useState2[0], setPosition = _useState2[1];\n    var lastPosition = React.useRef({\n        x: 0,\n        y: 0,\n        k: 1\n    });\n    var mapRef = React.useRef();\n    var zoomRef = React.useRef();\n    var bypassEvents = React.useRef(false);\n    var _translateExtent = _slicedToArray(translateExtent, 2), a = _translateExtent[0], b = _translateExtent[1];\n    var _a = _slicedToArray(a, 2), a1 = _a[0], a2 = _a[1];\n    var _b = _slicedToArray(b, 2), b1 = _b[0], b2 = _b[1];\n    var _scaleExtent = _slicedToArray(scaleExtent, 2), minZoom = _scaleExtent[0], maxZoom = _scaleExtent[1];\n    React.useEffect(function() {\n        var svg = d3Selection.select(mapRef.current);\n        function handleZoomStart(d3Event) {\n            if (!onMoveStart || bypassEvents.current) return;\n            onMoveStart({\n                coordinates: projection.invert(getCoords(width, height, d3Event.transform)),\n                zoom: d3Event.transform.k\n            }, d3Event);\n        }\n        function handleZoom(d3Event) {\n            if (bypassEvents.current) return;\n            var transform = d3Event.transform, sourceEvent = d3Event.sourceEvent;\n            setPosition({\n                x: transform.x,\n                y: transform.y,\n                k: transform.k,\n                dragging: sourceEvent\n            });\n            if (!onMove) return;\n            onMove({\n                x: transform.x,\n                y: transform.y,\n                zoom: transform.k,\n                dragging: sourceEvent\n            }, d3Event);\n        }\n        function handleZoomEnd(d3Event) {\n            if (bypassEvents.current) {\n                bypassEvents.current = false;\n                return;\n            }\n            var _projection$invert = projection.invert(getCoords(width, height, d3Event.transform)), _projection$invert2 = _slicedToArray(_projection$invert, 2), x = _projection$invert2[0], y = _projection$invert2[1];\n            lastPosition.current = {\n                x: x,\n                y: y,\n                k: d3Event.transform.k\n            };\n            if (!onMoveEnd) return;\n            onMoveEnd({\n                coordinates: [\n                    x,\n                    y\n                ],\n                zoom: d3Event.transform.k\n            }, d3Event);\n        }\n        function filterFunc(d3Event) {\n            if (filterZoomEvent) {\n                return filterZoomEvent(d3Event);\n            }\n            return d3Event ? !d3Event.ctrlKey && !d3Event.button : false;\n        }\n        var zoom = d3Zoom.zoom().filter(filterFunc).scaleExtent([\n            minZoom,\n            maxZoom\n        ]).translateExtent([\n            [\n                a1,\n                a2\n            ],\n            [\n                b1,\n                b2\n            ]\n        ]).on(\"start\", handleZoomStart).on(\"zoom\", handleZoom).on(\"end\", handleZoomEnd);\n        zoomRef.current = zoom;\n        svg.call(zoom);\n    }, [\n        width,\n        height,\n        a1,\n        a2,\n        b1,\n        b2,\n        minZoom,\n        maxZoom,\n        projection,\n        onMoveStart,\n        onMove,\n        onMoveEnd,\n        filterZoomEvent\n    ]);\n    React.useEffect(function() {\n        if (lon === lastPosition.current.x && lat === lastPosition.current.y && zoom === lastPosition.current.k) return;\n        var coords = projection([\n            lon,\n            lat\n        ]);\n        var x = coords[0] * zoom;\n        var y = coords[1] * zoom;\n        var svg = d3Selection.select(mapRef.current);\n        bypassEvents.current = true;\n        svg.call(zoomRef.current.transform, d3Zoom.zoomIdentity.translate(width / 2 - x, height / 2 - y).scale(zoom));\n        setPosition({\n            x: width / 2 - x,\n            y: height / 2 - y,\n            k: zoom\n        });\n        lastPosition.current = {\n            x: lon,\n            y: lat,\n            k: zoom\n        };\n    }, [\n        lon,\n        lat,\n        zoom,\n        width,\n        height,\n        projection\n    ]);\n    return {\n        mapRef: mapRef,\n        position: position,\n        transformString: \"translate(\".concat(position.x, \" \").concat(position.y, \") scale(\").concat(position.k, \")\")\n    };\n}\nvar _excluded$4 = [\n    \"center\",\n    \"zoom\",\n    \"minZoom\",\n    \"maxZoom\",\n    \"translateExtent\",\n    \"filterZoomEvent\",\n    \"onMoveStart\",\n    \"onMove\",\n    \"onMoveEnd\",\n    \"className\"\n];\nvar ZoomableGroup = React.forwardRef(function(_ref, ref) {\n    var _ref$center = _ref.center, center = _ref$center === void 0 ? [\n        0,\n        0\n    ] : _ref$center, _ref$zoom = _ref.zoom, zoom = _ref$zoom === void 0 ? 1 : _ref$zoom, _ref$minZoom = _ref.minZoom, minZoom = _ref$minZoom === void 0 ? 1 : _ref$minZoom, _ref$maxZoom = _ref.maxZoom, maxZoom = _ref$maxZoom === void 0 ? 8 : _ref$maxZoom, translateExtent = _ref.translateExtent, filterZoomEvent = _ref.filterZoomEvent, onMoveStart = _ref.onMoveStart, onMove = _ref.onMove, onMoveEnd = _ref.onMoveEnd, className = _ref.className, restProps = _objectWithoutProperties(_ref, _excluded$4);\n    var _useContext = React.useContext(MapContext), width = _useContext.width, height = _useContext.height;\n    var _useZoomPan = useZoomPan({\n        center: center,\n        filterZoomEvent: filterZoomEvent,\n        onMoveStart: onMoveStart,\n        onMove: onMove,\n        onMoveEnd: onMoveEnd,\n        scaleExtent: [\n            minZoom,\n            maxZoom\n        ],\n        translateExtent: translateExtent,\n        zoom: zoom\n    }), mapRef = _useZoomPan.mapRef, transformString = _useZoomPan.transformString, position = _useZoomPan.position;\n    return /*#__PURE__*/ React__default[\"default\"].createElement(ZoomPanProvider, {\n        value: {\n            x: position.x,\n            y: position.y,\n            k: position.k,\n            transformString: transformString\n        }\n    }, /*#__PURE__*/ React__default[\"default\"].createElement(\"g\", {\n        ref: mapRef\n    }, /*#__PURE__*/ React__default[\"default\"].createElement(\"rect\", {\n        width: width,\n        height: height,\n        fill: \"transparent\"\n    }), /*#__PURE__*/ React__default[\"default\"].createElement(\"g\", _extends({\n        ref: ref,\n        transform: transformString,\n        className: \"rsm-zoomable-group \".concat(className)\n    }, restProps))));\n});\nZoomableGroup.displayName = \"ZoomableGroup\";\nZoomableGroup.propTypes = {\n    center: PropTypes__default[\"default\"].array,\n    zoom: PropTypes__default[\"default\"].number,\n    minZoom: PropTypes__default[\"default\"].number,\n    maxZoom: PropTypes__default[\"default\"].number,\n    translateExtent: PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].array),\n    onMoveStart: PropTypes__default[\"default\"].func,\n    onMove: PropTypes__default[\"default\"].func,\n    onMoveEnd: PropTypes__default[\"default\"].func,\n    className: PropTypes__default[\"default\"].string\n};\nvar _excluded$3 = [\n    \"id\",\n    \"fill\",\n    \"stroke\",\n    \"strokeWidth\",\n    \"className\"\n];\nvar Sphere = React.forwardRef(function(_ref, ref) {\n    var _ref$id = _ref.id, id = _ref$id === void 0 ? \"rsm-sphere\" : _ref$id, _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? \"transparent\" : _ref$fill, _ref$stroke = _ref.stroke, stroke = _ref$stroke === void 0 ? \"currentcolor\" : _ref$stroke, _ref$strokeWidth = _ref.strokeWidth, strokeWidth = _ref$strokeWidth === void 0 ? 0.5 : _ref$strokeWidth, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$3);\n    var _useContext = React.useContext(MapContext), path = _useContext.path;\n    var spherePath = React.useMemo(function() {\n        return path({\n            type: \"Sphere\"\n        });\n    }, [\n        path\n    ]);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(React.Fragment, null, /*#__PURE__*/ React__default[\"default\"].createElement(\"defs\", null, /*#__PURE__*/ React__default[\"default\"].createElement(\"clipPath\", {\n        id: id\n    }, /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", {\n        d: spherePath\n    }))), /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", _extends({\n        ref: ref,\n        d: spherePath,\n        fill: fill,\n        stroke: stroke,\n        strokeWidth: strokeWidth,\n        style: {\n            pointerEvents: \"none\"\n        },\n        className: \"rsm-sphere \".concat(className)\n    }, restProps)));\n});\nSphere.displayName = \"Sphere\";\nSphere.propTypes = {\n    id: PropTypes__default[\"default\"].string,\n    fill: PropTypes__default[\"default\"].string,\n    stroke: PropTypes__default[\"default\"].string,\n    strokeWidth: PropTypes__default[\"default\"].number,\n    className: PropTypes__default[\"default\"].string\n};\nvar Sphere$1 = React.memo(Sphere);\nvar _excluded$2 = [\n    \"coordinates\",\n    \"children\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseDown\",\n    \"onMouseUp\",\n    \"onFocus\",\n    \"onBlur\",\n    \"style\",\n    \"className\"\n];\nvar Marker = React.forwardRef(function(_ref, ref) {\n    var coordinates = _ref.coordinates, children = _ref.children, onMouseEnter = _ref.onMouseEnter, onMouseLeave = _ref.onMouseLeave, onMouseDown = _ref.onMouseDown, onMouseUp = _ref.onMouseUp, onFocus = _ref.onFocus, onBlur = _ref.onBlur, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$2);\n    var _useContext = React.useContext(MapContext), projection = _useContext.projection;\n    var _useState = React.useState(false), _useState2 = _slicedToArray(_useState, 2), isPressed = _useState2[0], setPressed = _useState2[1];\n    var _useState3 = React.useState(false), _useState4 = _slicedToArray(_useState3, 2), isFocused = _useState4[0], setFocus = _useState4[1];\n    var _projection = projection(coordinates), _projection2 = _slicedToArray(_projection, 2), x = _projection2[0], y = _projection2[1];\n    function handleMouseEnter(evt) {\n        setFocus(true);\n        if (onMouseEnter) onMouseEnter(evt);\n    }\n    function handleMouseLeave(evt) {\n        setFocus(false);\n        if (isPressed) setPressed(false);\n        if (onMouseLeave) onMouseLeave(evt);\n    }\n    function handleFocus(evt) {\n        setFocus(true);\n        if (onFocus) onFocus(evt);\n    }\n    function handleBlur(evt) {\n        setFocus(false);\n        if (isPressed) setPressed(false);\n        if (onBlur) onBlur(evt);\n    }\n    function handleMouseDown(evt) {\n        setPressed(true);\n        if (onMouseDown) onMouseDown(evt);\n    }\n    function handleMouseUp(evt) {\n        setPressed(false);\n        if (onMouseUp) onMouseUp(evt);\n    }\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"g\", _extends({\n        ref: ref,\n        transform: \"translate(\".concat(x, \", \").concat(y, \")\"),\n        className: \"rsm-marker \".concat(className),\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onMouseDown: handleMouseDown,\n        onMouseUp: handleMouseUp,\n        style: style[isPressed || isFocused ? isPressed ? \"pressed\" : \"hover\" : \"default\"]\n    }, restProps), children);\n});\nMarker.displayName = \"Marker\";\nMarker.propTypes = {\n    coordinates: PropTypes__default[\"default\"].array,\n    children: PropTypes__default[\"default\"].oneOfType([\n        PropTypes__default[\"default\"].node,\n        PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].node)\n    ]),\n    onMouseEnter: PropTypes__default[\"default\"].func,\n    onMouseLeave: PropTypes__default[\"default\"].func,\n    onMouseDown: PropTypes__default[\"default\"].func,\n    onMouseUp: PropTypes__default[\"default\"].func,\n    onFocus: PropTypes__default[\"default\"].func,\n    onBlur: PropTypes__default[\"default\"].func,\n    style: PropTypes__default[\"default\"].object,\n    className: PropTypes__default[\"default\"].string\n};\nvar _excluded$1 = [\n    \"from\",\n    \"to\",\n    \"coordinates\",\n    \"stroke\",\n    \"strokeWidth\",\n    \"fill\",\n    \"className\"\n];\nvar Line = React.forwardRef(function(_ref, ref) {\n    var _ref$from = _ref.from, from = _ref$from === void 0 ? [\n        0,\n        0\n    ] : _ref$from, _ref$to = _ref.to, to = _ref$to === void 0 ? [\n        0,\n        0\n    ] : _ref$to, coordinates = _ref.coordinates, _ref$stroke = _ref.stroke, stroke = _ref$stroke === void 0 ? \"currentcolor\" : _ref$stroke, _ref$strokeWidth = _ref.strokeWidth, strokeWidth = _ref$strokeWidth === void 0 ? 3 : _ref$strokeWidth, _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? \"transparent\" : _ref$fill, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded$1);\n    var _useContext = React.useContext(MapContext), path = _useContext.path;\n    var lineData = {\n        type: \"LineString\",\n        coordinates: coordinates || [\n            from,\n            to\n        ]\n    };\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", _extends({\n        ref: ref,\n        d: path(lineData),\n        className: \"rsm-line \".concat(className),\n        stroke: stroke,\n        strokeWidth: strokeWidth,\n        fill: fill\n    }, restProps));\n});\nLine.displayName = \"Line\";\nLine.propTypes = {\n    from: PropTypes__default[\"default\"].array,\n    to: PropTypes__default[\"default\"].array,\n    coordinates: PropTypes__default[\"default\"].array,\n    stroke: PropTypes__default[\"default\"].string,\n    strokeWidth: PropTypes__default[\"default\"].number,\n    fill: PropTypes__default[\"default\"].string,\n    className: PropTypes__default[\"default\"].string\n};\nvar _excluded = [\n    \"subject\",\n    \"children\",\n    \"connectorProps\",\n    \"dx\",\n    \"dy\",\n    \"curve\",\n    \"className\"\n];\nvar Annotation = React.forwardRef(function(_ref, ref) {\n    var subject = _ref.subject, children = _ref.children, connectorProps = _ref.connectorProps, _ref$dx = _ref.dx, dx = _ref$dx === void 0 ? 30 : _ref$dx, _ref$dy = _ref.dy, dy = _ref$dy === void 0 ? 30 : _ref$dy, _ref$curve = _ref.curve, curve = _ref$curve === void 0 ? 0 : _ref$curve, _ref$className = _ref.className, className = _ref$className === void 0 ? \"\" : _ref$className, restProps = _objectWithoutProperties(_ref, _excluded);\n    var _useContext = React.useContext(MapContext), projection = _useContext.projection;\n    var _projection = projection(subject), _projection2 = _slicedToArray(_projection, 2), x = _projection2[0], y = _projection2[1];\n    var connectorPath = createConnectorPath(dx, dy, curve);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"g\", _extends({\n        ref: ref,\n        transform: \"translate(\".concat(x + dx, \", \").concat(y + dy, \")\"),\n        className: \"rsm-annotation \".concat(className)\n    }, restProps), /*#__PURE__*/ React__default[\"default\"].createElement(\"path\", _extends({\n        d: connectorPath,\n        fill: \"transparent\",\n        stroke: \"#000\"\n    }, connectorProps)), children);\n});\nAnnotation.displayName = \"Annotation\";\nAnnotation.propTypes = {\n    subject: PropTypes__default[\"default\"].array,\n    children: PropTypes__default[\"default\"].oneOfType([\n        PropTypes__default[\"default\"].node,\n        PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].node)\n    ]),\n    dx: PropTypes__default[\"default\"].number,\n    dy: PropTypes__default[\"default\"].number,\n    curve: PropTypes__default[\"default\"].number,\n    connectorProps: PropTypes__default[\"default\"].object,\n    className: PropTypes__default[\"default\"].string\n};\nexports.Annotation = Annotation;\nexports.ComposableMap = ComposableMap;\nexports.Geographies = Geographies;\nexports.Geography = Geography$1;\nexports.Graticule = Graticule$1;\nexports.Line = Line;\nexports.MapContext = MapContext;\nexports.MapProvider = MapProvider;\nexports.Marker = Marker;\nexports.Sphere = Sphere$1;\nexports.ZoomPanContext = ZoomPanContext;\nexports.ZoomPanProvider = ZoomPanProvider;\nexports.ZoomableGroup = ZoomableGroup;\nexports.useGeographies = useGeographies;\nexports.useMapContext = useMapContext;\nexports.useZoomPan = useZoomPan;\nexports.useZoomPanContext = useZoomPanContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-simple-maps/dist/index.js\n");

/***/ })

};
;